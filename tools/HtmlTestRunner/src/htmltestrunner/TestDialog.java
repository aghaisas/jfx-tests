/*
 * Copyright (c) 2009, 2012, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation. Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 */

package htmltestrunner;

import com.sun.javatest.Status;
import java.awt.AWTException;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.InvocationTargetException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import javax.swing.text.BadLocationException;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;

/**
 *
 * @author shura
 */
public class TestDialog extends javax.swing.JDialog {

    private boolean passed = true;
    private Status status = Status.error("Execution aborted!");
    private String filePrefix;
    private Exception contentLoadException = null;

    /** Creates new form TestDialog */
    private TestDialog(final String fileName, String testName, String filePrefix) {
        super((JFrame) null, true);
        this.filePrefix = filePrefix;
        initComponents();
        failure.setEnabled(false);
        failureLabel.setEnabled(false);
        screenshot.setEnabled(false);
        screenshotTimeout.setEnabled(false);
        seconds.setEnabled(false);
        countdown.setText("");
        setTitle(testName);
        pass.requestFocus();
        description.setEditable(false);
        getRootPane().setDefaultButton(pass);
        EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    description.setPage(new File(fileName).toURI().toString());
                } catch (IOException ex) {
                    contentLoadException = null;
                    status = Status.error(ex.getMessage());
                    setVisible(false);
                }
            }
        });
    }

    /**
     *
     * @return
     */
    public Exception getContentLoadException() {
        return contentLoadException;
    }

    /**
     *
     * @param filePath
     * @param testName
     * @param filePrefix
     * @return
     * @throws InterruptedException
     * @throws InvocationTargetException
     */
    public static TestDialog createDialog(final String filePath, final String testName, final String filePrefix) throws InterruptedException, InvocationTargetException {
        final TestDialog[] dialog = new TestDialog[1];
        SwingUtilities.invokeAndWait(new Runnable() {

            public void run() {
                dialog[0] = new TestDialog(filePath, testName, filePrefix);
            }
        });

        return dialog[0];
    }

    /**
     *
     * @return
     */
    public Status getStatus() {
        return status;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        pass = new javax.swing.JButton();
        fail = new javax.swing.JButton();
        failure = new javax.swing.JTextField();
        failureLabel = new javax.swing.JLabel();
        screenshot = new javax.swing.JCheckBox();
        screenshotTimeout = new javax.swing.JTextField();
        seconds = new javax.swing.JLabel();
        countdown = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        description = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        pass.setText("Pass");
        pass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passActionPerformed(evt);
            }
        });

        fail.setText("Fail");
        fail.setNextFocusableComponent(failure);
        fail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                failActionPerformed(evt);
            }
        });

        failure.setNextFocusableComponent(screenshot);

        failureLabel.setText("Describe the failure:");

        screenshot.setText("Take screenshot in ...");
        screenshot.setNextFocusableComponent(screenshotTimeout);
        screenshot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                screenshotActionPerformed(evt);
            }
        });

        screenshotTimeout.setColumns(3);
        screenshotTimeout.setText("0");
        screenshotTimeout.setNextFocusableComponent(fail);

        seconds.setText("seconds");

        countdown.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        countdown.setForeground(java.awt.Color.red);
        countdown.setText("10 seconds left");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(screenshot)
                        .addGap(18, 18, 18)
                        .addComponent(screenshotTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(seconds)
                        .addGap(18, 18, 18)
                        .addComponent(countdown, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pass)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fail))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(failureLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(failure, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(failure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(failureLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(pass)
                        .addComponent(fail))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(seconds)
                        .addComponent(countdown)
                        .addComponent(screenshotTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(screenshot)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        description.setContentType("text/html");
        description.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      Please wait ...\n    </p>\n  </body>\n</html>\n");
        jScrollPane1.setViewportView(description);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void failActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_failActionPerformed
        if (passed == true) {
            passed = false;
            failure.setEnabled(true);
            failureLabel.setEnabled(true);
            screenshot.setEnabled(true);
            pass.setEnabled(false);
            failure.requestFocus();
            getRootPane().setDefaultButton(fail);
        } else {
            status = Status.failed(failure.getText());
            final int timeout = Integer.parseInt(screenshotTimeout.getText());
            if (timeout > 0) {
                countdown.setText(timeout + " seconds left");
            }
            new Thread(new Runnable() {

                public void run() {
                    for (int c = timeout; c > 0; c--) {
                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(TestDialog.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        countdown.setText(c + " seconds left");
                    }
                    dispose();
                }
            }).start();
        }
}//GEN-LAST:event_failActionPerformed

    private void passActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passActionPerformed
        status = Status.passed("");
        dispose();
}//GEN-LAST:event_passActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    }//GEN-LAST:event_formWindowClosing

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        try {
            if (status.isFailed() && screenshot.isSelected()) {
                dumpScreen();
            }
        } catch (IOException ex) {
            status = Status.error(ex.getMessage());
        } catch (AWTException ex) {
            status = Status.error(ex.getMessage());
        }
    }//GEN-LAST:event_formWindowClosed

    private void screenshotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_screenshotActionPerformed
        screenshotTimeout.setEnabled(screenshot.isSelected());
        seconds.setEnabled(screenshot.isSelected());
        if (screenshot.isSelected()) {
            screenshotTimeout.setSelectionStart(0);
            screenshotTimeout.setSelectionEnd(screenshotTimeout.getText().length());
            screenshotTimeout.requestFocus();
        }
    }//GEN-LAST:event_screenshotActionPerformed

    private void dumpScreen() throws AWTException, IOException {
        setVisible(false);
        BufferedImage screendump = new Robot().createScreenCapture(new Rectangle(Toolkit.getDefaultToolkit().getScreenSize()));
        ImageIO.write(screendump, "jpg", new File(filePrefix + "_screendump.jpg"));
    }

    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     * @throws java.lang.InterruptedException
     * @throws java.lang.reflect.InvocationTargetException
     */
    public static void main(String args[]) throws IOException, InterruptedException, InvocationTargetException {
        File workdir = File.createTempFile("testrunner_test_workdir", "");
        workdir.delete();
        workdir.mkdirs();
        System.out.println("Workdir: " + workdir);
        System.out.println(createDialog("", "test", workdir.getAbsolutePath() + File.separator));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel countdown;
    private javax.swing.JTextPane description;
    private javax.swing.JButton fail;
    private javax.swing.JTextField failure;
    private javax.swing.JLabel failureLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton pass;
    private javax.swing.JCheckBox screenshot;
    private javax.swing.JTextField screenshotTimeout;
    private javax.swing.JLabel seconds;
    // End of variables declaration//GEN-END:variables
}
